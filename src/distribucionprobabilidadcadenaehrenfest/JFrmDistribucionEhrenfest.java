/*
 * codigo cadena de Ehrenfest
 */
package distribucionprobabilidadcadenaehrenfest;

import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.SwingWorker; // Necesario para animaciones sin congelar UI
import java.awt.BorderLayout;
import javax.swing.SpinnerNumberModel;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.HeadlessException;

/**
 *
 * @author Vincent Fernandez 
 */
public class JFrmDistribucionEhrenfest extends javax.swing.JFrame {

    /**
     * Creates new form JFrmDistribucionEhrenfest
     */
    
    public void inicializarVariables(){
    this.txtTransiciones.setEnabled(false);
    //this.txtVectorInicial.setEnabled(false);
    this.btnTransponer.setEnabled(false);
    this.btnCalcularDistribucion.setEnabled(false);
    this.txtResultado.setEnabled(false);
    
    txtVectorInicial.putClientProperty("JTextField.placeholderText", "Vector separado por comas.Ej: 0,0,0,1,0");
    }
  
    private UrnasPanel urnasPanelVisual = new UrnasPanel();// inicializamos un objeto de la clase UrnasPanel
    SpinnerNumberModel spinnerNumberModelUrnaA = new SpinnerNumberModel(0,0,20,1);//Inicializamos un objeto de tipo SpinnerNumberModel con rango min(0) y max(20)
    SpinnerNumberModel spinnerNumberModelUrnaB = new SpinnerNumberModel(0,0,20,1);//Inicializamos un objeto de tipo SpinnerNumberModel con rango min(0) y max(20)
    
    private double[][] matrizTransicion;
    private double[][] matrizTranspuesta;
    private int m; // número total de bolas

    public JFrmDistribucionEhrenfest() {
    initComponents(); 
    inicializarVariables(); 
    
    EstadoUrnaA.setModel(spinnerNumberModelUrnaA);
    EstadoUrnaB.setModel(spinnerNumberModelUrnaB);
    
    if (panelVisualizacionContenedor != null) { 
        panelVisualizacionContenedor.add(urnasPanelVisual, java.awt.BorderLayout.CENTER); // Añádelo al centro del BorderLayout
        panelVisualizacionContenedor.revalidate(); // Actualiza el layout
        panelVisualizacionContenedor.repaint();   // Redibuja
    } else {
        System.err.println("Error: panelVisualizacionContenedor no fue inicializado por NetBeans. Verifica el nombre de variable en el diseñador.");
    }
    
    }

    public void DisableInputs(){
        
    this.txtTransiciones.setEnabled(false);
    this.txtVectorInicial.setEnabled(false);
    this.btnTransponer.setEnabled(false);
    this.btnCalcularDistribucion.setEnabled(false);
    this.txtResultado.setEnabled(false);
    this.EstadoUrnaA.setEnabled(false);
    this.EstadoUrnaB.setEnabled(false);
    this.btnGenerarMatriz.setEnabled(false);
    this.btnTransponer.setEnabled(false);
    
    }
    
    public void EnableInputs(){
    this.txtTransiciones.setEnabled(true);
    this.txtVectorInicial.setEnabled(true);
    this.btnTransponer.setEnabled(true);
    this.btnCalcularDistribucion.setEnabled(true);
    this.txtResultado.setEnabled(true);
    this.EstadoUrnaA.setEnabled(true);
    this.EstadoUrnaB.setEnabled(true);
    this.btnGenerarMatriz.setEnabled(true);
    this.btnTransponer.setEnabled(true);
    }


    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jOptionPane2 = new javax.swing.JOptionPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMatriz = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaTranspuesta = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnGenerarMatriz = new javax.swing.JButton();
        jLadelTextoBolasTotales = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTransiciones = new javax.swing.JTextField();
        txtVectorInicial = new javax.swing.JTextField();
        btnCalcularDistribucion = new javax.swing.JButton();
        btnTransponer = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        EstadoUrnaA = new javax.swing.JSpinner();
        EstadoUrnaB = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        panelVisualizacionContenedor = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultado y resumen de los estados de probabilidad"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane3.setViewportView(txtResultado);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 370, 220));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 20, 420, 290));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrices"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaMatriz);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 460, 260));

        tablaTranspuesta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tablaTranspuesta);

        jPanel3.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 440, 260));

        jLabel4.setText("Matriz Transpuesta");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 26, 290, 40));

        jLabel5.setText("Matriz Generada");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 310, 40));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 980, 350));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Operadores"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGenerarMatriz.setText("Generar Matriz");
        btnGenerarMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarMatrizActionPerformed(evt);
            }
        });
        jPanel4.add(btnGenerarMatriz, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, 30));
        jPanel4.add(jLadelTextoBolasTotales, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 250, 30));

        jLabel3.setText("Estado del vector Inicial ");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 270, 30));

        jLabel1.setText("Numero de Transiciones");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 140, 30));
        jPanel4.add(txtTransiciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, 80, 30));
        jPanel4.add(txtVectorInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 270, 30));

        btnCalcularDistribucion.setText("Calcular Distribucion de P(x)");
        btnCalcularDistribucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularDistribucionActionPerformed(evt);
            }
        });
        jPanel4.add(btnCalcularDistribucion, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 610, -1, 30));

        btnTransponer.setText("Transponer Matriz ");
        btnTransponer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransponerActionPerformed(evt);
            }
        });
        jPanel4.add(btnTransponer, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, 150, 30));

        jLabel6.setText("Numero de Bolas en la Urna A(i)");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 190, 30));

        jLabel7.setText("Numero de Bolas en la Urna B");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 180, 30));

        EstadoUrnaA.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        EstadoUrnaA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel4.add(EstadoUrnaA, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 70, 30));

        EstadoUrnaB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        EstadoUrnaB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel4.add(EstadoUrnaB, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 70, 30));
        jPanel4.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 310, 10));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Distribucion de Probabilidad");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 280, 40));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 20, 330, 660));

        panelVisualizacionContenedor.setBackground(new java.awt.Color(255, 255, 255));
        panelVisualizacionContenedor.setBorder(javax.swing.BorderFactory.createTitledBorder("simulador"));
        jPanel1.add(panelVisualizacionContenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 510, 290));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 700));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarMatrizActionPerformed
     
   
    int numBolasA = 0;
    int numBolasB = 0;
    int totalBolasCalculado = numBolasA + numBolasB;
    this.m = totalBolasCalculado; // Asegurarse que 'm' global se actualiza
    
    
    // Capturar el valor del JSpinner
    Object valorObjetoA = EstadoUrnaA.getValue();
    Object valorObjetoB= EstadoUrnaB.getValue();
        if ((valorObjetoA instanceof Integer) & (valorObjetoB instanceof Integer)) {
            numBolasA = (Integer) valorObjetoA;
            numBolasB = (Integer) valorObjetoB;
            System.out.println("El valor del spinnerA es: " + numBolasA + "\nEl valor del SpinnerB es: " + numBolasB );
        } else {
            // Manejar el caso en que el valor no sea un Integer (poco probable con SpinnerNumberModel)
            System.out.println("Error: El valor del spinner no es un número entero.");
        }
    
    
    try {

        m = numBolasA + numBolasB;
        jLadelTextoBolasTotales.setText("El numero de Bolas Totales es: " + String.valueOf(m));
        if (m <= 0) {
            JOptionPane.showMessageDialog(this, "El número de bolas debe ser positivo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("i/j");

        for (int j = 0; j <= m; j++) {
            modeloTabla.addColumn("j=" + j);
        }

        matrizTransicion = new double[m + 1][m + 1];
        
        //generar matriz matriz de transicion a partir del estado de la urnas
        for (int i= 0; i <= m; i++) {
            Object[] fila = new Object[m + 2];
            fila[0] = "i=" + i;

            for (int j = 0; j <= m; j++) {
                if (j == i - 1 && i > 0) {
                    matrizTransicion[i][j] = (double) i / m;
                } else if (j == i + 1 && i < m) {
                    matrizTransicion[i][j] = (double) (m - i) / m;
                } else {
                    matrizTransicion[i][j] = 0;
                }

                fila[j + 1] = String.format("%.3f", matrizTransicion[i][j]);
            }
            modeloTabla.addRow(fila);
        }

        tablaMatriz.setModel(modeloTabla);


        if (urnasPanelVisual != null) {
                     urnasPanelVisual.inicializarPelotas(numBolasA, numBolasB, this.m);
                }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido", "Error", JOptionPane.ERROR_MESSAGE);
    }

        this.btnTransponer.setEnabled(true);
    }//GEN-LAST:event_btnGenerarMatrizActionPerformed

    private void btnCalcularDistribucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularDistribucionActionPerformed
    
   txtResultado.setText("");
   int numBolasA = (Integer) EstadoUrnaA.getValue();
   int numBolasB = (Integer) EstadoUrnaB.getValue();

    try {
        String[] partes = txtVectorInicial.getText().trim().split(",");
        double[] vector = new double[partes.length];

        for (int i = 0; i < partes.length; i++) {
            vector[i] = Double.parseDouble(partes[i].trim());
        }

        int transiciones = Integer.parseInt(txtTransiciones.getText());

        if (matrizTranspuesta == null || vector.length != matrizTranspuesta.length) {
            JOptionPane.showMessageDialog(this, "Debes generar y transponer la matriz antes. Además, el vector debe coincidir en tamaño.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for (int t = 0; t < transiciones; t++) {
            double[] nuevo = new double[vector.length];
            StringBuilder resultado = new StringBuilder();

            resultado.append("TRANSICIÓN ").append(t + 1).append(":\n");

            // Multiplicación usando matrizTranspuesta
            for (int i = 0; i < matrizTranspuesta.length; i++) {
                resultado.append("Cálculo de P(X").append(t + 1).append(" = Estado ").append(i).append("):\n");

                double suma = 0;
                for (int j = 0; j < matrizTranspuesta.length; j++) {
                    double producto = matrizTranspuesta[i][j] * vector[j];
                    resultado.append(String.format("  (%.3f * %.3f ) + %.3f\n", matrizTranspuesta[i][j], vector[j], producto));
                    suma += producto;
                }

                nuevo[i] = suma;
                resultado.append(String.format("Suma total para Estado %d: %.3f\n\n", i, suma));
            }

            vector = nuevo;

            resultado.append("Distribución después de la transición ").append(t + 1).append(":\n");
            for (int i = 0; i < vector.length; i++) {
                resultado.append("  Estado ").append(i).append(": ").append(String.format("%.5f", vector[i])).append("\n");
            }
            resultado.append("\n");

            txtResultado.append(resultado.toString());
        }

    } catch (HeadlessException | NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error al calcular la distribución: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

        DisableInputs();
        if (urnasPanelVisual != null && this.m > 0) {
            final int numTransicionesVisuales = Integer.parseInt(txtTransiciones.getText());
            if (numTransicionesVisuales <= 0) return;

            // Usar SwingWorker para no congelar la UI durante la animación
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    for (int i = 0; i < numTransicionesVisuales; i++) {
                        if (isCancelled()) break;
                        
                        // Pedir al panel que simule un movimiento
                        // El panel internamente decidirá de dónde a dónde basado en las probabilidades
                        // del estado actual de las pelotas VISUALES.
                        javax.swing.SwingUtilities.invokeAndWait(() -> { // Asegurar que se llama en EDT si modifica UI directamente
                             urnasPanelVisual.simularMovimientoUnaPelota();
                        });
                       
                        // Pausa para que la animación de una pelota se complete o sea visible
                        // Este sleep es para la pausa ENTRE el inicio de movimientos de pelotas sucesivas.
                        // La animación de UNA pelota es manejada por el Timer DENTRO de UrnasPanel.
                        Thread.sleep(2000); // Pausa de 2 segundo entre cada INICIO de movimiento de pelota
                                           // Ajusta este valor según prefieras la velocidad de la simulación total.
                    }
                    return null;
                }

                @Override
                protected void done() {
                    // Puedes hacer algo cuando todas las transiciones visuales terminen
                    // Por ejemplo, re-habilitar botones
                    System.out.println("Simulación visual completada.");
                    EnableInputs();
                }
            };
            worker.execute();
        }
        

        
    }//GEN-LAST:event_btnCalcularDistribucionActionPerformed

    private void btnTransponerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransponerActionPerformed
        // TODO add your handling code here:
        
       
    if (matrizTransicion == null) {
        JOptionPane.showMessageDialog(this, "Primero genera la matriz de transición", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }
    int size = matrizTransicion.length;
    matrizTranspuesta = new double[size][size];


    
    // Calcular transpuesta
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            matrizTranspuesta[i][j] = matrizTransicion[j][i];
        }
    }
    

    // Mostrar en una nueva tabla
    DefaultTableModel modeloTranspuesta = new DefaultTableModel();
    modeloTranspuesta.addColumn("i/j");

    for (int j = 0; j < size; j++) {
        modeloTranspuesta.addColumn("j=" + j);
    }

    for (int i = 0; i < size; i++) {
        Object[] fila = new Object[size + 1];
        fila[0] = "i=" + i;

        for (int j = 0; j < size; j++) {
            fila[j + 1] = String.format("%.3f", matrizTranspuesta[i][j]);
        }

        modeloTranspuesta.addRow(fila);
    }

    tablaTranspuesta.setModel(modeloTranspuesta);
    this.btnCalcularDistribucion.setEnabled(true);
    this.txtVectorInicial.setEnabled(true);
    this.txtTransiciones.setEnabled(true);
    this.txtResultado.setEnabled(true);

    }//GEN-LAST:event_btnTransponerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightLaf.setup();
/* Set the Nimbus look and feel */
                /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrmDistribucionEhrenfest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner EstadoUrnaA;
    private javax.swing.JSpinner EstadoUrnaB;
    private javax.swing.JButton btnCalcularDistribucion;
    private javax.swing.JButton btnGenerarMatriz;
    private javax.swing.JButton btnTransponer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLadelTextoBolasTotales;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JOptionPane jOptionPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panelVisualizacionContenedor;
    private javax.swing.JTable tablaMatriz;
    private javax.swing.JTable tablaTranspuesta;
    private javax.swing.JTextArea txtResultado;
    private javax.swing.JTextField txtTransiciones;
    private javax.swing.JTextField txtVectorInicial;
    // End of variables declaration//GEN-END:variables
}
