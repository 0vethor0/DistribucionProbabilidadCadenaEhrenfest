/*
 * codigo cadena de Ehrenfest
 */
package distribucionprobabilidadcadenaehrenfest;

import com.formdev.flatlaf.FlatLightLaf;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vincent Fernandez y Rhenzo Lopez
 */
public class JFrmDistribucionEhrenfest extends javax.swing.JFrame {

    /**
     * Creates new form JFrmDistribucionEhrenfest
     */
    public JFrmDistribucionEhrenfest() {
        initComponents();
        inicializarVariables();
    }
   private double[][] matrizTransicion;
    private double[][] matrizTranspuesta;
    private int m; // número de bolas
    
    public void inicializarVariables(){
    
    this.txtTransiciones.setEnabled(false);
    this.txtVectorInicial.setEnabled(false);
    this.btnTransponer.setEnabled(false);
    this.btnCalcularDistribucion.setEnabled(false);
    this.txtResultado.setEnabled(false);
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMatriz = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaTranspuesta = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnGenerarMatriz = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtNumeroBolas = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTransiciones = new javax.swing.JTextField();
        txtVectorInicial = new javax.swing.JTextField();
        btnCalcularDistribucion = new javax.swing.JButton();
        btnTransponer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultado y resumen de los estados de probabilidad"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane3.setViewportView(txtResultado);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 460, 220));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 520, 300));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrices"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaMatriz);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 460, 260));

        tablaTranspuesta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tablaTranspuesta);

        jPanel3.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 440, 260));

        jLabel4.setText("Matriz Transpuesta");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 26, 290, 40));

        jLabel5.setText("Matriz Generada");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 310, 40));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 980, 350));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("operador"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGenerarMatriz.setText("Generar Matriz");
        btnGenerarMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarMatrizActionPerformed(evt);
            }
        });
        jPanel4.add(btnGenerarMatriz, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, -1, 30));

        jLabel2.setText("Numero de bolas totales (N)");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 160, 30));
        jPanel4.add(txtNumeroBolas, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 70, 30));

        jLabel3.setText("Estado Inicial (separado por comas. EJ: 0,0,0,1,0)");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 290, 30));

        jLabel1.setText("Numero de Transiciones");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 140, 30));
        jPanel4.add(txtTransiciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 80, 30));
        jPanel4.add(txtVectorInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 170, 30));

        btnCalcularDistribucion.setText("Calcular Distribucion de P(x)");
        btnCalcularDistribucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularDistribucionActionPerformed(evt);
            }
        });
        jPanel4.add(btnCalcularDistribucion, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 260, -1, -1));

        btnTransponer.setText("Transponer Matriz ");
        btnTransponer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransponerActionPerformed(evt);
            }
        });
        jPanel4.add(btnTransponer, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 150, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 410, 300));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 700));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarMatrizActionPerformed
        // TODO add your handling code here:
        try {
    m = Integer.parseInt(txtNumeroBolas.getText());

    if (m <= 0) {
        JOptionPane.showMessageDialog(this, "El número de bolas debe ser positivo", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    DefaultTableModel modeloTabla = new DefaultTableModel();
    modeloTabla.addColumn("i/j");

    for (int j = 0; j <= m; j++) {
        modeloTabla.addColumn("j=" + j);
    }

    matrizTransicion = new double[m + 1][m + 1];

    for (int i = 0; i <= m; i++) {
        Object[] fila = new Object[m + 2];
        fila[0] = "i=" + i;

        for (int j = 0; j <= m; j++) {
            if (j == i - 1 && i > 0) {
                matrizTransicion[i][j] = (double) i / m;
            } else if (j == i + 1 && i < m) {
                matrizTransicion[i][j] = (double) (m - i) / m;
            } else {
                matrizTransicion[i][j] = 0;
            }

            fila[j + 1] = String.format("%.3f", matrizTransicion[i][j]);
        }
        modeloTabla.addRow(fila);
    }

    tablaMatriz.setModel(modeloTabla);

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido", "Error", JOptionPane.ERROR_MESSAGE);
}

        this.btnTransponer.setEnabled(true);
    }//GEN-LAST:event_btnGenerarMatrizActionPerformed

    private void btnCalcularDistribucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularDistribucionActionPerformed
    
   txtResultado.setText("");


    try {
        String[] partes = txtVectorInicial.getText().trim().split(",");
        double[] vector = new double[partes.length];

        for (int i = 0; i < partes.length; i++) {
            vector[i] = Double.parseDouble(partes[i].trim());
        }

        int transiciones = Integer.parseInt(txtTransiciones.getText());

        if (matrizTranspuesta == null || vector.length != matrizTranspuesta.length) {
            JOptionPane.showMessageDialog(this, "Debes generar y transponer la matriz antes. Además, el vector debe coincidir en tamaño.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (int t = 0; t < transiciones; t++) {
            double[] nuevo = new double[vector.length];
            StringBuilder resultado = new StringBuilder();

            resultado.append("TRANSICIÓN ").append(t + 1).append(":\n");

            // Multiplicación usando matrizTranspuesta
            for (int i = 0; i < matrizTranspuesta.length; i++) {
                resultado.append("Cálculo de P(X").append(t + 1).append(" = Estado ").append(i).append("):\n");

                double suma = 0;
                for (int j = 0; j < matrizTranspuesta.length; j++) {
                    double producto = matrizTranspuesta[i][j] * vector[j];
                    resultado.append(String.format("  (%.3f * %.3f ) + %.3f\n", matrizTranspuesta[i][j], vector[j], producto));
                    suma += producto;
                }

                nuevo[i] = suma;
                resultado.append(String.format("Suma total para Estado %d: %.3f\n\n", i, suma));
            }

            vector = nuevo;

            resultado.append("Distribución después de la transición ").append(t + 1).append(":\n");
            for (int i = 0; i < vector.length; i++) {
                resultado.append("  Estado ").append(i).append(": ").append(String.format("%.5f", vector[i])).append("\n");
            }
            resultado.append("\n");

            txtResultado.append(resultado.toString());
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al calcular la distribución: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }



        
    }//GEN-LAST:event_btnCalcularDistribucionActionPerformed

    private void btnTransponerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransponerActionPerformed
        // TODO add your handling code here:
        
       
    if (matrizTransicion == null) {
        JOptionPane.showMessageDialog(this, "Primero genera la matriz de transición", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }
    int size = matrizTransicion.length;
    matrizTranspuesta = new double[size][size];


    
    // Calcular transpuesta
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            matrizTranspuesta[i][j] = matrizTransicion[j][i];
        }
    }
    

    // Mostrar en una nueva tabla
    DefaultTableModel modeloTranspuesta = new DefaultTableModel();
    modeloTranspuesta.addColumn("i/j");

    for (int j = 0; j < size; j++) {
        modeloTranspuesta.addColumn("j=" + j);
    }

    for (int i = 0; i < size; i++) {
        Object[] fila = new Object[size + 1];
        fila[0] = "i=" + i;

        for (int j = 0; j < size; j++) {
            fila[j + 1] = String.format("%.3f", matrizTranspuesta[i][j]);
        }

        modeloTranspuesta.addRow(fila);
    }

    tablaTranspuesta.setModel(modeloTranspuesta);
    this.btnCalcularDistribucion.setEnabled(true);
    this.txtVectorInicial.setEnabled(true);
    this.txtTransiciones.setEnabled(true);
    this.txtResultado.setEnabled(true);

    }//GEN-LAST:event_btnTransponerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        FlatLightLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrmDistribucionEhrenfest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcularDistribucion;
    private javax.swing.JButton btnGenerarMatriz;
    private javax.swing.JButton btnTransponer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tablaMatriz;
    private javax.swing.JTable tablaTranspuesta;
    private javax.swing.JTextField txtNumeroBolas;
    private javax.swing.JTextArea txtResultado;
    private javax.swing.JTextField txtTransiciones;
    private javax.swing.JTextField txtVectorInicial;
    // End of variables declaration//GEN-END:variables
}
